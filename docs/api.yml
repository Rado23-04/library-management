openapi: 3.2.3
info:
  title: Library API
  version: 3.0.3
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books  
  - name: Author
paths:
  /books/import:
    post:
      tags:
        - Books
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                fileType:
                  type: string
                  enum: [excel, json]
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Book'
  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                fileType:
                  type: string
                  enum: [excel, json]
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Author'                  
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: Date start 
          description: Filter books with a release date greater than or equal to the specified date.
          required: false
          schema:
            type: string 
            format: date 
        - in: query
          name: date end 
          description: Filter books with a release date less than or equal to the specified date.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page 
          description: page number for pagination
          required: false    
          schema:  
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of items 
          required: false 
          schema: 
            type: integer
            default: 50 
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/badRequestResponses'          
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/badRequestResponses'          
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: Get all author
      description: The returned author
      operationId: get author
      tags:
        - Author
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: authorname 
          description: Filter authors by name
          required: false
          schema:
            type: string 
        - in: path
          name: page
          description: Page number for pagination 
          required: true
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page 
          required: true
          schema:
            type: integer
            default: 50    
      responses:
        200:
          description: The list of filtered author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update a list of author
      operationId: crupdateAuthor
      tags:
        - Author
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /book/import:
    post:  
      tags:
        - Books  
      summary: Import books from Excel or JSON
      operationId: Import books
      requestBody:
        required: true
        content:
          multpart/form-data:
            schema: 
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                jsonFile:
                  type: string
                  format: binary
      responses:
        200:
          description: List of imported books 
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Bad request 
          content:
            application/json:
              schema:
                $ref: "#/components/responses/badRequestResponses"
  /authors/importa:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                jsonFile:
                  type: string
                  format: binary
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/badRequestResponses'
  /authors/{aId}:                
    delete:
      summary: Delete author 
      operationId: deletedAuthor 
      tags:
        - Author
      parameters:
        - name: aId
          in: path
          description: author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of deleted author
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Author'    
  /books/{bookId}/authors/{authoursId}:
    put:
      summary: update books's author
      tags:
        - Author
      parameters:
        - name: bookId
          in: path
          description: id book update 
          required: true
          schema:
            type: integer
        - name: authoursId
          in: path
          description: id author 
          required: true
          schema: 
            type: integer
      responses:
        200:
          description: succes update books's author
        400:
          description: failed, request fail
        404:
          description: not found      

  /books/authors:
    put:
      summary: update author's book 
      tags:
        - Author
      requestBody:
        description: request body for update author's book
        required: true
        content:
          application/json:
            schema:   
              type: array
              items:
                type: object
              properties:
                bookId:
                  type: integer
                  description: id book updated 
                authoursId:
                  type: integer
                  description: id new author
      responses:
        200:
          description: succes, updated book's author
        400:
          description: request failed              
                    
       
        


components:
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema: 
        type: integer
        default: 1
    queryPaginationPageSize:
      name: pageSize
      in: query
      description: Number of items per page
      required: false
      schema: 
        type: integer
        default: 50
    pathPaginationPage:
      name: page
      in: path
      description: page number for pagination
      required: true
      schema: 
        type: integer
        default: 1
    pathPaginationPageSize:
      name: pageSize
      in: path
      description: number of items page 
      required: true
      schema: 
        type: integer
        default: 50
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
        - $ref: '#/components/schemas/Author'  
    Author:  
      type: object
      properties:
        id:
          type: string
        authorname:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    crupdateBook:
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER      
  responses:
    baseResponse:
      description: base structure response
      content:
        application/json:
          schema: 
            type: object
            properties:
              status:
                type: object
                properties:
                    code:
                      type: integer
                    message:
                      type: string
              body:
                type: object
    successResponses:
      $ref: '#/components/responses/baseResponse'
      description: successful response
    badRequestResponses:
      $ref: '#/components/responses/baseResponse'
      description: bad request 

    
      

#La pagination est généralement gérée à l'aide des paramètres de requête plutôt qu'à travers les entêtes de la requête
#Les entêtes de la requête, en revanche, sont généralement utilisés pour des informations générales sur la requête, telles 
#que les informations d'authentification, le type de contenu accepté, les informations sur la langue